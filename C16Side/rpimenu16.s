;
; File generated by cc65 v 2.18 - Git 9faca05
;
	.fopt		compiler,"cc65 v 2.18 - Git 9faca05"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_cgetc
	.export		_test
	.export		_updateScreen
	.export		_copyCharset
	.import		_wait4IRQ
	.export		_main

.segment	"BSS"

_test:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ updateScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateScreen: near

.segment	"CODE"

;
; __asm__ ("lda #$01");
;
	lda     #$01
;
; __asm__ ("sta $fde5");
;
	sta     $fde5
;
; __asm__ ("lda #$00");
;
	lda     #$00
;
; __asm__ ("sta $fc");
;
	sta     $fc
;
; __asm__ ("lda #$08");
;
	lda     #$08
;
; __asm__ ("sta $fd");
;
	sta     $fd
;
; __asm__ ("ldy #$00");
;
	ldy     #$00
;
; __asm__ ("lda $fde5");
;
loopc:	lda     $fde5
;
; __asm__ ("sta ($fc),y");
;
	sta     ($fc),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("bne loopc");
;
	bne     loopc
;
; __asm__ ("inc $fd");
;
	inc     $fd
;
; __asm__ ("lda $fd");
;
	lda     $fd
;
; __asm__ ("cmp #$0c");
;
	cmp     #$0c
;
; __asm__ ("bne loopc"); 
;
	bne     loopc
;
; __asm__ ("lda $fde5");
;
loop2c:	lda     $fde5
;
; __asm__ ("sta ($fc),y");
;
	sta     ($fc),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("cmp #232");
;
	cmp     #232
;
; __asm__ ("bne loop2c");
;
	bne     loop2c
;
; __asm__ ("lda #$00");
;
	lda     #$00
;
; __asm__ ("sta $fde5");
;
	sta     $fde5
;
; __asm__ ("sta $fc");
;
	sta     $fc
;
; __asm__ ("lda #$0c");
;
	lda     #$0c
;
; __asm__ ("sta $fd");
;
	sta     $fd
;
; __asm__ ("ldy #$00");
;
	ldy     #$00
;
; __asm__ ("lda $fde5");
;
loop:	lda     $fde5
;
; __asm__ ("sta ($fc),y");
;
	sta     ($fc),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("bne loop");
;
	bne     loop
;
; __asm__ ("inc $fd");
;
	inc     $fd
;
; __asm__ ("lda $fd");
;
	lda     $fd
;
; __asm__ ("cmp #$0f");
;
	cmp     #$0f
;
; __asm__ ("bne loop"); 
;
	bne     loop
;
; __asm__ ("lda $fde5");
;
loop2:	lda     $fde5
;
; __asm__ ("sta ($fc),y");
;
	sta     ($fc),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("tya");
;
	tya
;
; __asm__ ("cmp #232");
;
	cmp     #232
;
; __asm__ ("bne loop2");
;
	bne     loop2
;
; __asm__ ("lda $fde5");
;
	lda     $fde5
;
; __asm__ ("sta $ff13"); // char address in RAM
;
	sta     $ff13
;
; __asm__ ("lda $fde5");
;
	lda     $fde5
;
; __asm__ ("sta $ff15"); // background color
;
	sta     $ff15
;
; __asm__ ("lda $fde5");
;
	lda     $fde5
;
; __asm__ ("sta $ff19"); // border color
;
	sta     $ff19
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ copyCharset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_copyCharset: near

.segment	"CODE"

;
; __asm__ ("lda #$02");
;
	lda     #$02
;
; __asm__ ("sta $fde5");
;
	sta     $fde5
;
; __asm__ ("lda #$00");
;
	lda     #$00
;
; __asm__ ("sta $fc");
;
	sta     $fc
;
; __asm__ ("lda #$60");
;
	lda     #$60
;
; __asm__ ("sta $fd");
;
	sta     $fd
;
; __asm__ ("ldy #$00");
;
	ldy     #$00
;
; __asm__ ("lda $fde5");
;
loop:	lda     $fde5
;
; __asm__ ("sta ($fc),y");
;
	sta     ($fc),y
;
; __asm__ ("iny");
;
	iny
;
; __asm__ ("bne loop");
;
	bne     loop
;
; __asm__ ("inc $fd");
;
	inc     $fd
;
; __asm__ ("lda $fd");
;
	lda     $fd
;
; __asm__ ("cmp #$70");
;
	cmp     #$70
;
; __asm__ ("bne loop");
;
	bne     loop
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"BSS"

L0092:
	.res	1,$00
L0093:
	.res	1,$00

.segment	"CODE"

;
; __asm__ ("lda #$0");
;
	lda     #$0
;
; __asm__ ("sta $ff15"); // background color
;
	sta     $ff15
;
; __asm__ ("sta $ff19"); // border color
;
	sta     $ff19
;
; machine = 0;
;
	sta     L0092
;
; *(unsigned char*)(0x3fff) = 0xff;
;
	lda     #$FF
	sta     $3FFF
;
; *(unsigned char*)(0x7fff) = 0xff;
;
	sta     $7FFF
;
; *(unsigned char*)(0x3fff) = 0x00;
;
	lda     #$00
	sta     $3FFF
;
; if ( *(unsigned char*)(0x7fff) == 0 )
;
	lda     $7FFF
;
; machine = 0; else   // 16k
;
	beq     L00CC
;
; machine = 1;  // 64k
;
	lda     #$01
L00CC:	sta     L0092
;
; a = *(unsigned char*)(0xff07) >> 6; // 0 == PAL, 1 == NTSC
;
	lda     $FF07
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     L0093
;
; machine |= a << 1;
;
	asl     a
	ora     L0092
	sta     L0092
;
; *(unsigned char*)(0xfde4) = machine;
;
	sta     $FDE4
;
; copyCharset();
;
	jsr     _copyCharset
;
; *(unsigned char*)(0xff12) &= ~4;
;
	lda     $FF12
	and     #$FB
	sta     $FF12
;
; *(unsigned char*)(0xff13) = CHARADR;
;
	lda     #$60
	sta     $FF13
;
; a = 20;
;
	lda     #$14
L00CD:	sta     L0093
;
; wait4IRQ(); // also uploads the keypress stored in A
;
	ldy     #$00
	jsr     _wait4IRQ
;
; updateScreen();
;
	jsr     _updateScreen
;
; a = cgetc();
;
	jsr     _cgetc
;
; while ( 1 )
;
	jmp     L00CD

.endproc

